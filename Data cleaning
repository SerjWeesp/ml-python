{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:00:24.410789Z",
     "start_time": "2021-05-07T16:00:24.217589Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pd.options.display.max_rows = 46000\n",
    "import re\n",
    "from currency_converter import CurrencyConverter\n",
    "c = CurrencyConverter()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:00:24.569747Z",
     "start_time": "2021-05-07T16:00:24.412701Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('D:\\\\UW\\\\2nd semester\\\\Webscrapping\\\\Project\\\\cars_final2.csv', sep=',', low_memory = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:00:24.585751Z",
     "start_time": "2021-05-07T16:00:24.571699Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(46157, 22)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:00:24.601762Z",
     "start_time": "2021-05-07T16:00:24.587700Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Body Type', 'Condition', 'Cylinders', 'Engine',\n",
       "       'Exterior Color', 'For Sale By', 'Interior Color', 'Make', 'Mileage',\n",
       "       'Model', 'Price', 'Transmission', 'Vehicle Title', 'Warranty', 'Year',\n",
       "       'Number of Cylinders', 'Drive Type', 'Fuel Type', 'Drivetrain', 'Fuel',\n",
       "       'Engine Description'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:01.855472Z",
     "start_time": "2021-05-07T16:00:24.605704Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Body Type'].isnull(), 'Body Type'] = 'None'\n",
    "df.loc[df['Body Type'].str.contains('(?i)sedan'), 'Body Type'] = 'Sedan'\n",
    "df.loc[df['Body Type'].str.contains('(?i)coupe'),'Body Type'] = 'Coupe'\n",
    "df.loc[df['Body Type'].str.contains('(?i)pick'),'Body Type'] = 'Pickup'\n",
    "df.loc[df['Body Type'].str.contains('(?i)suv'),'Body Type'] = 'SUV'\n",
    "df.loc[df['Body Type'].str.contains('(?i)wagon'),'Body Type'] = 'Wagon'\n",
    "df.loc[df['Body Type'].str.contains('(?i)sport utility'),'Body Type'] = 'SUV'\n",
    "df.loc[df['Body Type'].str.contains('(?i)van'),'Body Type'] = 'Van'\n",
    "df.loc[df['Body Type'].str.contains('4'or'5'),'Body Type'] = 'Sedan'\n",
    "df.loc[df['Body Type'].str.contains('2'or'3'),'Body Type'] = 'Coupe'\n",
    "df.loc[df['Body Type'].str.contains('(?i)hatch'),'Body Type'] = 'None'\n",
    "df.loc[df['Body Type'].str.contains('--'),'Body Type'] = 'None'\n",
    "df.loc[df['Body Type'].str.contains('(?i)convertible'or'(?i)cabriolet'),'Body Type'] = 'Convertible '\n",
    "\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Body Type']=='None'), 'Body Type'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Body Type'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "types = ['SUV', 'Sedan', 'Coupe', 'Not defined', 'Pickup','Convertible', 'Van', 'Wagon']\n",
    "df.loc[df['Body Type'].str.contains('|'.join(types))==False,'Body Type'] = 'Other'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:01.871476Z",
     "start_time": "2021-05-07T16:01:01.857425Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SUV             11890\n",
       "Sedan           10954\n",
       "Coupe            6788\n",
       "Pickup           6603\n",
       "Other            3758\n",
       "Convertible      3108\n",
       "Van              1756\n",
       "Wagon            1300\n",
       "Name: Body Type, dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Body Type'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:01.954922Z",
     "start_time": "2021-05-07T16:01:01.873425Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Condition'].str.contains('(?i)new', na = False), 'Condition'] = 'New'\n",
    "df.loc[df['Condition'].str.contains('(?i)used', na = False), 'Condition'] = 'Used'\n",
    "df.loc[df['Condition'].str.contains('(?i)1', na = False), 'Condition'] = 'Used'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:01.970089Z",
     "start_time": "2021-05-07T16:01:01.954922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Used                   35511\n",
       "NaN                     4862\n",
       "New                     3353\n",
       "Certified pre-owned     2431\n",
       "Name: Condition, dtype: int64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Condition'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:36.797960Z",
     "start_time": "2021-05-07T16:01:01.972431Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Cylinders'].isnull(), 'Cylinders'] = df.loc[df['Cylinders'].isnull(), 'Number of Cylinders']\n",
    "df.loc[df['Cylinders'].str.contains('(?i)v6', na=False), 'Cylinders']=6\n",
    "df.loc[df['Cylinders'].str.contains('(?i)v8', na=False), 'Cylinders']=8\n",
    "df.loc[df['Cylinders'].str.contains('(?i)v10', na=False), 'Cylinders']=10\n",
    "df.loc[df['Cylinders'].str.contains('(?i)v12', na=False), 'Cylinders']=12\n",
    "df.loc[df['Cylinders'].str.contains('(?i)3', na=False), 'Cylinders']=3\n",
    "df.loc[df['Cylinders'].str.contains('(?i)4', na=False), 'Cylinders']=4\n",
    "df.loc[df['Cylinders'].str.contains('(?i)6', na=False), 'Cylinders']=6\n",
    "df.loc[df['Cylinders'].str.contains('(?i)8', na=False), 'Cylinders']=8\n",
    "df.loc[df['Cylinders'].str.contains('(?i)10', na=False), 'Cylinders']=10\n",
    "df.loc[df['Cylinders'].str.contains('(?i)12', na=False), 'Cylinders']=12\n",
    "cyl = ['1','2','3','4','5','6','8','9','10','11','12']\n",
    "df.loc[df['Cylinders'].str.contains('|'.join(cyl))==False,'Cylinders'] = None\n",
    "\n",
    "for i in range(1,13):\n",
    "    df.loc[df['Engine'].str.contains('(?i)i'+str(i), na=False), 'Cylinders'] = i\n",
    "    df.loc[df['Engine'].str.contains('(?i)v'+str(i), na=False), 'Cylinders'] = i\n",
    "    df.loc[df['Engine'].str.contains(str(i)+'(?i) cyl', na=False), 'Cylinders'] = i\n",
    "    df.loc[df['Engine'].str.contains(str(i)+'(?i)-cyl', na=False), 'Cylinders'] = i\n",
    "    \n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Cylinders'].isnull()), 'Cylinders'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Cylinders'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "df.loc[df['Cylinders'].isnull() == False, 'Cylinders'] = df.loc[df['Cylinders'].isnull()==False, 'Cylinders'].astype(str).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:36.814047Z",
     "start_time": "2021-05-07T16:01:36.799897Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0     16042\n",
       "4.0     14175\n",
       "6.0     12872\n",
       "NaN      1506\n",
       "12.0      657\n",
       "10.0      303\n",
       "3.0       283\n",
       "5.0       149\n",
       "7.0       104\n",
       "2.0        61\n",
       "1.0         5\n",
       "Name: Cylinders, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cylinders'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:01:36.930129Z",
     "start_time": "2021-05-07T16:01:36.815975Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No     35964\n",
       "Yes    10193\n",
       "Name: Turbo, dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Engine'].str.contains('(?i)cha', na = False), 'Turbo'] = 'Yes'\n",
    "df.loc[df['Engine'].str.contains('(?i)tur', na = False), 'Turbo'] = 'Yes'\n",
    "df.loc[df['Turbo']!='Yes', 'Turbo'] = 'No'\n",
    "df['Turbo'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:28.651830Z",
     "start_time": "2021-05-07T16:01:36.932080Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Engine'].isnull(), 'Engine'] = df.loc[df['Engine'].isnull(), 'Engine Description']\n",
    "df.loc[df['Engine'].str.contains('(?i)electr', na=False), 'Cylinders']  = 0\n",
    "\n",
    "df.loc[df['Engine'].isnull(), 'Engine'] = 'None'\n",
    "for j in range (1,10):\n",
    "    for k in range(0,10):\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'.'+str(k)+'(?i)L', na=False), 'Engine'] = str(j)+'.'+str(k) #5.0L\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'.'+str(k)+'(?i) L', na=False), 'Engine'] = str(j)+'.'+str(k) #5.0 L\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'.'+str(k)+'(?i) liter', na=False), 'Engine'] = str(j)+'.'+str(k) #5.0 Liter\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'.'+str(k), na=False), 'Engine'] = str(j)+'.'+str(k) #5.0\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'(?i)l', na=False), 'Engine'] = str(j)+'.'+str(k) #5L\n",
    "        df.loc[df['Engine'].str.contains(str(j)+'(?i) l', na=False), 'Engine'] = str(j)+'.'+str(k) #5 L\n",
    "        \n",
    "for i in range (1000,10000,100):\n",
    "    df.loc[df['Engine'].str.contains('(?i)'+str(i), na=False), 'Engine'] = str(i/1000)\n",
    "\n",
    "for i in range (100,1000,10):\n",
    "    df.loc[df['Engine'].str.contains('(?i)'+str(i), na=False), 'Engine'] = str(i/100)\n",
    "    \n",
    "df.loc[df['Engine'].str.contains('(?i)electr', na=False), 'Engine']  = 0\n",
    "df.loc[df['Engine'].str.contains('(?i)--', na=False), 'Engine']  = 'None'\n",
    "\n",
    "for i in range(1,13):\n",
    "    df.loc[df['Engine'].str.contains('(?i)i'+str(i), na=False), 'Engine'] = 'None'\n",
    "    df.loc[df['Engine'].str.contains('(?i)v'+str(i), na=False), 'Engine'] = 'None'\n",
    "    df.loc[df['Engine'].str.contains(str(i)+'(?i) cyl', na=False), 'Engine'] = 'None'\n",
    "    df.loc[df['Engine'].str.contains(str(i)+'(?i)-cyl', na=False), 'Engine'] = 'None'\n",
    "    df.loc[df['Engine'] == str(i), 'Engine'] = 'None'\n",
    "\n",
    "df.loc[df['Engine'].str.len()>3, 'Engine'] = 'None'\n",
    "df.loc[df['Engine'].str.contains('\\.', regex = True)==False, 'Engine'] = 'None'\n",
    "\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Engine']=='None'), 'Engine'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Engine'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:28.698924Z",
     "start_time": "2021-05-07T16:02:28.653784Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Engine']=='None', 'Engine'] = None\n",
    "df.loc[df['Engine'].isnull() == False, 'Engine'] = df.loc[df['Engine'].isnull()==False, 'Engine'].astype(str).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:28.714869Z",
     "start_time": "2021-05-07T16:02:28.701830Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0    6701\n",
       "3.0    5501\n",
       "NaN    4271\n",
       "3.5    2530\n",
       "4.0    1995\n",
       "3.6    1833\n",
       "1.2    1773\n",
       "2.5    1499\n",
       "1.0    1472\n",
       "5.0    1256\n",
       "1.4    1220\n",
       "1.5    1213\n",
       "5.7    1166\n",
       "2.3    1117\n",
       "6.7    1038\n",
       "1.1     967\n",
       "2.4     927\n",
       "6.0     918\n",
       "2.7     646\n",
       "4.6     632\n",
       "1.3     626\n",
       "3.7     545\n",
       "1.8     535\n",
       "1.6     513\n",
       "3.8     418\n",
       "2.1     398\n",
       "3.2     328\n",
       "4.7     327\n",
       "2.2     309\n",
       "2.9     297\n",
       "2.6     252\n",
       "3.9     250\n",
       "2.8     240\n",
       "4.8     221\n",
       "4.5     201\n",
       "3.3     200\n",
       "3.4     191\n",
       "3.1     189\n",
       "0.0     182\n",
       "4.4     143\n",
       "5.8     138\n",
       "5.9     117\n",
       "1.7     112\n",
       "1.9     105\n",
       "5.6      91\n",
       "6.8      79\n",
       "4.2      76\n",
       "4.9      73\n",
       "7.0      64\n",
       "4.3      46\n",
       "5.2      45\n",
       "4.1      37\n",
       "6.2      21\n",
       "5.3      21\n",
       "6.6      16\n",
       "8.0      16\n",
       "5.5      14\n",
       "5.4       9\n",
       "6.9       4\n",
       "7.3       4\n",
       "6.4       4\n",
       "6.5       4\n",
       "8.6       3\n",
       "6.1       3\n",
       "9.8       3\n",
       "5.1       2\n",
       "8.1       2\n",
       "7.8       2\n",
       "7.4       2\n",
       "8.2       1\n",
       "8.5       1\n",
       "9.0       1\n",
       "6.3       1\n",
       "Name: Engine, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Engine'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:28.946873Z",
     "start_time": "2021-05-07T16:02:28.717832Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "White     9542\n",
       "Black     9095\n",
       "Other     8620\n",
       "Gray      4824\n",
       "Silver    4505\n",
       "Red       4265\n",
       "Blue      4259\n",
       "Green     1047\n",
       "Name: Exterior Color, dtype: int64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_colors = ['White','Black','Gray','Silver','Blue','Red','Green']\n",
    "df.loc[df['Exterior Color']=='Grey', 'Exterior Color']='Gray'\n",
    "for col in ex_colors:\n",
    "    df.loc[df['Exterior Color'].str.contains('(?i)'+str(col)+'', na = False), 'Exterior Color'] = str(col)\n",
    "df.loc[df['Exterior Color'].str.contains('|'.join(ex_colors))==False,'Exterior Color']='Other'\n",
    "df.loc[df['Exterior Color'].isnull(),'Exterior Color']='Other'\n",
    "df['Exterior Color'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:29.017098Z",
     "start_time": "2021-05-07T16:02:28.949711Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dealer           42343\n",
       "Private Owner     3814\n",
       "Name: For Sale By, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['For Sale By'].str.contains('(?i)own', na = False), 'For Sale By'] = 'Private Owner'\n",
    "df.loc[df['For Sale By'].str.contains('(?i)private', na = False), 'For Sale By'] = 'Private Owner'\n",
    "df.loc[df['For Sale By']!='Private Owner', 'For Sale By'] = 'Dealer'\n",
    "df['For Sale By'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:29.219129Z",
     "start_time": "2021-05-07T16:02:29.017098Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Black    20270\n",
       "Other    13700\n",
       "Gray      6274\n",
       "Tan       3394\n",
       "Red       1280\n",
       "Brown     1239\n",
       "Name: Interior Color, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "in_colors = ['Black','Gray','Tan','Brown','Red']\n",
    "df.loc[df['Interior Color']=='Grey', 'Interior Color']='Gray'\n",
    "for col in in_colors:\n",
    "    df.loc[df['Interior Color'].str.contains('(?i)'+str(col)+'', na = False), 'Interior Color'] = str(col)\n",
    "df.loc[df['Interior Color'].str.contains('|'.join(in_colors))==False,'Interior Color']='Other'\n",
    "df.loc[df['Interior Color'].isnull(),'Interior Color']='Other'\n",
    "df['Interior Color'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:29.540674Z",
     "start_time": "2021-05-07T16:02:29.222050Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ford                       8037\n",
       "Chevrolet                  6275\n",
       "Mercedes-Benz              3678\n",
       "BMW                        2282\n",
       "Toyota                     1897\n",
       "Dodge                      1641\n",
       "Ram                        1337\n",
       "Audi                       1203\n",
       "Porsche                    1100\n",
       "Lexus                      1097\n",
       "Cadillac                   1039\n",
       "GMC                        1004\n",
       "Honda                       982\n",
       "Volkswagen                  944\n",
       "Land Rover                  855\n",
       "Hyundai                     721\n",
       "Mazda                       665\n",
       "Infiniti                    651\n",
       "Kia                         643\n",
       "Jaguar                      630\n",
       "Lincoln                     628\n",
       "Buick                       626\n",
       "Subaru                      579\n",
       "Nissan                      570\n",
       "Pontiac                     543\n",
       "Jeep                        503\n",
       "Acura                       444\n",
       "Chrysler                    422\n",
       "Ferrari                     386\n",
       "Maserati                    332\n",
       "Bentley                     331\n",
       "Volvo                       306\n",
       "Alfa Romeo                  293\n",
       "Mitsubishi                  271\n",
       "Mini                        268\n",
       "NaN                         262\n",
       "Lamborghini                 241\n",
       "Plymouth                    237\n",
       "Rolls-Royce                 209\n",
       "Oldsmobile                  166\n",
       "Tesla                       144\n",
       "Mercury                     141\n",
       "Other Makes                 131\n",
       "Aston Martin                120\n",
       "McLaren                     112\n",
       "Fiat                        111\n",
       "MG                          106\n",
       "Hummer                       97\n",
       "Austin Healey                68\n",
       "Datsun                       52\n",
       "Triumph                      46\n",
       "Packard                      45\n",
       "Suzuki                       43\n",
       "Studebaker                   41\n",
       "AMC                          40\n",
       "Saab                         38\n",
       "Smart                        37\n",
       "Scion                        37\n",
       "Lotus                        35\n",
       "Willys                       35\n",
       "Shelby                       30\n",
       "International Harvester      29\n",
       "Austin                       26\n",
       "Replica/Kit Makes            25\n",
       "Isuzu                        24\n",
       "Saturn                       23\n",
       "Nash                         21\n",
       "Hudson                       13\n",
       "Sunbeam                      12\n",
       "Genesis                      12\n",
       "Lancia                       11\n",
       "DeSoto                       11\n",
       "Morgan                       10\n",
       "De Tomaso                     9\n",
       "Citroën                       8\n",
       "Daihatsu                      7\n",
       "AM General                    7\n",
       "Bugatti                       6\n",
       "Morris                        5\n",
       "Opel                          5\n",
       "Fisker                        5\n",
       "Renault                       4\n",
       "DeLorean                      3\n",
       "Land_Rover                    3\n",
       "Cord                          3\n",
       "Maybach                       3\n",
       "Edsel                         3\n",
       "Kaiser                        2\n",
       "DAIHATSU                      2\n",
       "Rover                         2\n",
       "Isuzu Med Duty                2\n",
       "Sonata                        2\n",
       "Mercedes Benz                 2\n",
       "Nissan Infiniti               2\n",
       "Am General                    2\n",
       "Bremen                        2\n",
       "Camaro                        2\n",
       "Harley Davidson               2\n",
       "Harley-Davidson               2\n",
       "International                 2\n",
       "Signature Autosport           2\n",
       "Clean                         2\n",
       "Peugeot                       2\n",
       "Vespa                         1\n",
       "Pantera                       1\n",
       "Subaru WRX STI                1\n",
       "FREIGHTLINER                  1\n",
       "Riley                         1\n",
       "Black                         1\n",
       "VLF                           1\n",
       "1976                          1\n",
       "2dr Cpe Z06                   1\n",
       "--                            1\n",
       "triumph                       1\n",
       "Daewoo                        1\n",
       "Siata                         1\n",
       "Rolls Royce                   1\n",
       "Aston_Martin                  1\n",
       "Factory Five                  1\n",
       "Freightliner                  1\n",
       "Shelby Replica                1\n",
       "CUSHMAN                       1\n",
       "freightliner                  1\n",
       "Mercedes-Maybach              1\n",
       "Suzyky                        1\n",
       "Willies                       1\n",
       "Willys-Overland               1\n",
       "MERCEDES BENZ                 1\n",
       "OTHER MAKE                    1\n",
       "pontiac                       1\n",
       "Geo                           1\n",
       "Meyers Manx                   1\n",
       "Rootes                        1\n",
       "Name: Make, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brands = ['Ford', 'Chevrolet', 'Mercedes-Benz', 'BMW', 'Toyota', 'Dodge', 'Ram', 'Audi', 'Porsche', 'Lexus', 'Cadillac', 'GMC']\n",
    "for brand in brands:\n",
    "    df.loc[df['Make'].str.contains('(?i)'+str(brand)+'', na = False), 'Make'] = str(brand)\n",
    "df.loc[df['Make'].str.contains('|'.join(brands))==False,'Make']='Other'\n",
    "df['Make'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:29.646450Z",
     "start_time": "2021-05-07T16:02:29.542621Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50977.20557711606"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Mileage'].str.contains('[A-Za-z]', na=False), 'Mileage'] = None\n",
    "df.loc[df['Mileage'].str.contains('[0-9]',na=False)==False, 'Mileage'] = None\n",
    "df.loc[df['Mileage'].isnull() == False, 'Mileage'] = df['Mileage'].str.replace(',','')\n",
    "df.loc[df['Mileage'].isnull() == False, 'Mileage'] = df.loc[df['Mileage'].isnull()==False, 'Mileage'].astype(str).astype(int)\n",
    "df.loc[df['Mileage']>999999, 'Mileage'] = 999999\n",
    "df.loc[df['Mileage'].isnull(), 'Mileage'] = df['Mileage'].mean()\n",
    "df['Mileage'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:31.492014Z",
     "start_time": "2021-05-07T16:02:29.647551Z"
    }
   },
   "outputs": [],
   "source": [
    "df['USD'] = df.loc[df['Price'].str.contains('(?i)u', na = False), 'Price'].str.extract('(\\d+)')\n",
    "df['CAD'] = df.loc[df['Price'].str.contains('(?i)c', na = False), 'Price'].str.extract('(\\d+)').astype(int)*round(c.convert(1, \"CAD\", 'USD'))\n",
    "df.loc[df['Price'].str.contains('(?i)u', na = False), 'Price'] = df['USD']\n",
    "df.loc[df['Price'].str.contains('(?i)c', na = False), 'Price'] = df['CAD']\n",
    "df.loc[df['Price'].str.contains('[A-Za-z]', na=False), 'Price'] = None\n",
    "df.loc[df['Price'].str.contains('[0-9]',na=False)==False, 'Price'] = None\n",
    "df.loc[df['Price'].isnull() == False, 'Price'] = df.loc[df['Price'].isnull()==False, 'Price'].astype(str).astype(int)\n",
    "for brand in df['Make'].unique():\n",
    "    df.loc[(df['Make']==brand) & (df['Price'].isnull()), 'Price'] = round(df.loc[(df['Make']==brand) & (df['Price'].isnull())==False, 'Price'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:31.552806Z",
     "start_time": "2021-05-07T16:02:31.493966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Automatic    40950\n",
       "Manual        5207\n",
       "Name: Transmission, dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Transmission'].str.contains('(?i)man', na = False), 'Transmission'] = 'Manual'\n",
    "df.loc[df['Transmission']!='Manual', 'Transmission'] = 'Automatic'\n",
    "df['Transmission'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:31.584802Z",
     "start_time": "2021-05-07T16:02:31.554739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Clean    43603\n",
       "Other     2554\n",
       "Name: Vehicle Title, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Vehicle Title'] == 'Clear', 'Vehicle Title'] = 'Clean'\n",
    "df.loc[df['Vehicle Title'] == '--', 'Vehicle Title'] = 'Clean'\n",
    "df.loc[df['Vehicle Title'] != 'Clean', 'Vehicle Title'] = 'Other'\n",
    "df['Vehicle Title'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:31.642268Z",
     "start_time": "2021-05-07T16:02:31.587224Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No     41843\n",
       "Yes     4314\n",
       "Name: Warranty, dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Warranty'].str.contains('(?i)no', na = False), 'Warranty'] = 'No'\n",
    "df.loc[df['Warranty']=='Unspecified', 'Warranty'] = 'No'\n",
    "df.loc[df['Warranty'].isnull(), 'Warranty'] = 'No'\n",
    "df.loc[df['Warranty']!='No', 'Warranty'] = 'Yes'\n",
    "df['Warranty'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:31.718109Z",
     "start_time": "2021-05-07T16:02:31.645430Z"
    }
   },
   "outputs": [],
   "source": [
    "df.loc[df['Year'].str.contains('[A-Za-z]', na=False), 'Year'] = None\n",
    "df.loc[df['Year'].str.contains('[0-9]',na=False)==False, 'Year'] = None\n",
    "df.loc[df['Year'].isnull() == False, 'Year'] = df.loc[df['Year'].isnull()==False, 'Year'].astype(str).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:02:33.283284Z",
     "start_time": "2021-05-07T16:02:31.720059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2018.0    6773\n",
       "2017.0    4607\n",
       "2020.0    3509\n",
       "2019.0    3507\n",
       "2021.0    3131\n",
       "2016.0    2164\n",
       "2015.0    2025\n",
       "2014.0    1826\n",
       "2013.0    1473\n",
       "2012.0     995\n",
       "2011.0     876\n",
       "2008.0     649\n",
       "2007.0     619\n",
       "2010.0     572\n",
       "2006.0     558\n",
       "2005.0     504\n",
       "1969.0     468\n",
       "1967.0     438\n",
       "2009.0     419\n",
       "2004.0     403\n",
       "1966.0     363\n",
       "2003.0     360\n",
       "1970.0     359\n",
       "2002.0     341\n",
       "1968.0     338\n",
       "1965.0     333\n",
       "1972.0     285\n",
       "1957.0     267\n",
       "1971.0     264\n",
       "NaN        257\n",
       "1995.0     231\n",
       "2001.0     230\n",
       "1973.0     213\n",
       "1964.0     207\n",
       "1994.0     206\n",
       "2000.0     206\n",
       "1979.0     205\n",
       "1955.0     200\n",
       "1999.0     200\n",
       "1996.0     189\n",
       "1978.0     184\n",
       "1963.0     184\n",
       "1987.0     184\n",
       "1986.0     175\n",
       "1956.0     173\n",
       "1974.0     168\n",
       "1993.0     167\n",
       "1991.0     161\n",
       "1997.0     156\n",
       "1988.0     156\n",
       "1977.0     154\n",
       "1992.0     150\n",
       "1989.0     148\n",
       "1976.0     145\n",
       "1985.0     140\n",
       "1962.0     138\n",
       "1998.0     138\n",
       "1980.0     136\n",
       "1990.0     128\n",
       "1932.0     116\n",
       "1984.0     115\n",
       "1960.0     107\n",
       "1959.0     107\n",
       "1954.0     105\n",
       "1975.0     104\n",
       "1961.0      95\n",
       "1948.0      93\n",
       "1940.0      91\n",
       "1983.0      90\n",
       "1951.0      89\n",
       "1950.0      86\n",
       "1958.0      86\n",
       "1981.0      83\n",
       "1982.0      77\n",
       "1934.0      70\n",
       "1937.0      69\n",
       "1953.0      69\n",
       "1947.0      65\n",
       "1941.0      64\n",
       "1949.0      63\n",
       "1929.0      59\n",
       "1952.0      56\n",
       "1936.0      52\n",
       "1931.0      44\n",
       "1930.0      42\n",
       "1935.0      41\n",
       "1939.0      39\n",
       "1946.0      37\n",
       "1933.0      35\n",
       "1938.0      33\n",
       "1928.0      26\n",
       "1925.0      17\n",
       "1923.0      15\n",
       "1927.0      14\n",
       "1942.0      10\n",
       "1926.0       9\n",
       "1924.0       7\n",
       "1900.0       5\n",
       "1912.0       4\n",
       "1920.0       3\n",
       "1913.0       2\n",
       "1901.0       2\n",
       "1945.0       1\n",
       "1914.0       1\n",
       "1918.0       1\n",
       "1944.0       1\n",
       "1922.0       1\n",
       "1921.0       1\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Year']==0, 'Year'] = None\n",
    "df.loc[df['Year']>2021, 'Year'] = 2021\n",
    "for brand in df['Make'].unique():\n",
    "    df.loc[(df['Make']==brand) & (df['Year'].isnull()), 'Year'] = round(df.loc[(df['Make']==brand) & (df['Year'].isnull())==False, 'Year'].mean())\n",
    "df['Year'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:03:08.812757Z",
     "start_time": "2021-05-07T16:02:33.283284Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2WD    26907\n",
       "AWD    19250\n",
       "Name: Drive Type, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Drive Type'].isnull(), 'Drive Type'] = df.loc[df['Drive Type'].isnull(), 'Drivetrain']\n",
    "df.loc[df['Drive Type'].str.contains('(?i)4', na = False), 'Drive Type'] = 'AWD'\n",
    "df.loc[df['Drive Type'].str.contains('(?i)quat', na = False), 'Drive Type'] = 'AWD'\n",
    "df.loc[df['Drive Type'].str.contains('(?i)all', na = False), 'Drive Type'] = 'AWD'\n",
    "df.loc[df['Drive Type'].str.contains('(?i)awd', na = False), 'Drive Type'] = 'AWD'\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Drive Type'].isnull()), 'Drive Type'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Drive Type'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "df.loc[df['Drive Type']!= 'AWD', 'Drive Type'] = '2WD'\n",
    "df['Drive Type'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:03:42.182018Z",
     "start_time": "2021-05-07T16:03:08.813975Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gasoline    40804\n",
       "Other        3020\n",
       "Diesel       2333\n",
       "Name: Fuel Type, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Fuel Type'].isnull(), 'Fuel Type'] = df.loc[df['Fuel Type'].isnull(), 'Fuel']\n",
    "df.loc[df['Fuel Type'].str.contains('(?i)elec',na = False ), 'Cylinders'] = 0\n",
    "df.loc[df['Fuel Type'].str.contains('(?i)elec',na = False ), 'Engine'] = 0\n",
    "df.loc[df['Fuel Type'].str.contains('(?i)gaso',na = False ), 'Fuel Type'] = 'Gasoline'\n",
    "df.loc[df['Fuel Type'].str.contains('(?i)die', na = False), 'Fuel Type'] = 'Diesel'\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Fuel Type'].isnull()), 'Fuel Type'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Fuel Type'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "df.loc[(df['Fuel Type']!='Gasoline') & (df['Fuel Type']!='Diesel'), 'Fuel Type'] = 'Other'\n",
    "df['Fuel Type'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:03:42.245044Z",
     "start_time": "2021-05-07T16:03:42.183991Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Used    42692\n",
       "New      3400\n",
       "NaN        65\n",
       "Name: Condition, dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Condition']=='Certified pre-owned', 'Condition'] = 'Used'\n",
    "df.loc[(df['Condition']=='None') & (df['Year']<2021), 'Condition'] = 'Used'\n",
    "df.loc[(df['Condition']=='None') & (df['Year']==2021), 'Condition'] = 'New'\n",
    "df.loc[(df['Condition'].isnull()) & (df['Year']<2021), 'Condition'] = 'Used'\n",
    "df.loc[(df['Condition'].isnull()) & (df['Year']==2021), 'Condition'] = 'New'\n",
    "\n",
    "df['Condition'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:21.677844Z",
     "start_time": "2021-05-07T16:03:42.248039Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8     16414\n",
       "4     14014\n",
       "6     13255\n",
       "0       926\n",
       "12      680\n",
       "10      313\n",
       "3       257\n",
       "5       149\n",
       "7       104\n",
       "2        40\n",
       "1         5\n",
       "Name: Cylinders, dtype: int64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for vol in df['Engine'].unique():\n",
    "    try:\n",
    "        df.loc[(df['Engine']==vol) & (df['Cylinders'].isnull()), 'Cylinders'] = df.loc[df['Engine']==vol, 'Cylinders'].value_counts()[0:1].index.tolist()\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "df.loc[df['Cylinders'].isnull() == False, 'Cylinders'] = df.loc[df['Cylinders'].isnull()==False, 'Cylinders'].astype(str).astype(int)\n",
    "\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Cylinders'].isnull()), 'Cylinders'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Cylinders'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "        \n",
    "for brand in df['Make'].unique():\n",
    "    for body in df.loc[df['Make']==brand, 'Body Type'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Body Type']==body) & (df['Cylinders'].isnull()), 'Cylinders'] = df.loc[(df['Make']==brand) & (df['Body Type']==body), 'Cylinders'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "df.loc[df['Cylinders'].isnull(), 'Cylinders'] = round(df['Cylinders'].mean()).astype(int)\n",
    "        \n",
    "df['Cylinders'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.271604Z",
     "start_time": "2021-05-07T16:04:21.679032Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0    6672\n",
       "3.0    5490\n",
       "3.5    2746\n",
       "3.6    2308\n",
       "4.0    2153\n",
       "1.2    1764\n",
       "2.5    1630\n",
       "1.0    1488\n",
       "2.3    1281\n",
       "5.0    1260\n",
       "1.4    1210\n",
       "1.5    1193\n",
       "5.7    1164\n",
       "6.7    1038\n",
       "1.1     958\n",
       "2.4     943\n",
       "6.0     916\n",
       "3.7     809\n",
       "2.9     805\n",
       "3.3     696\n",
       "2.7     681\n",
       "0.0     680\n",
       "4.6     650\n",
       "1.6     644\n",
       "1.3     633\n",
       "2.1     523\n",
       "1.8     483\n",
       "3.4     462\n",
       "3.8     436\n",
       "3.2     415\n",
       "2.2     386\n",
       "2.6     373\n",
       "4.7     367\n",
       "2.8     365\n",
       "3.9     279\n",
       "3.1     278\n",
       "4.8     220\n",
       "4.5     198\n",
       "1.9     177\n",
       "4.4     152\n",
       "4.1     142\n",
       "5.8     136\n",
       "5.9     117\n",
       "1.7     112\n",
       "4.2     104\n",
       "5.6      91\n",
       "4.9      82\n",
       "6.8      79\n",
       "7.0      59\n",
       "4.3      58\n",
       "5.2      57\n",
       "5.1      38\n",
       "6.2      22\n",
       "5.3      21\n",
       "5.4      18\n",
       "8.0      16\n",
       "5.5      15\n",
       "6.6      15\n",
       "0.9      11\n",
       "6.4       4\n",
       "6.5       4\n",
       "7.3       4\n",
       "6.9       4\n",
       "6.1       3\n",
       "0.3       3\n",
       "9.8       3\n",
       "8.6       3\n",
       "7.8       2\n",
       "7.4       2\n",
       "8.1       2\n",
       "6.3       1\n",
       "8.2       1\n",
       "8.5       1\n",
       "9.0       1\n",
       "Name: Engine, dtype: int64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for cyl in df['Cylinders'].unique():\n",
    "    try:\n",
    "        df.loc[(df['Cylinders']==cyl) & (df['Engine'].isnull()), 'Engine'] = df.loc[df['Cylinders']==cyl, 'Engine'].value_counts()[0:1].index.tolist()\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "for brand in df['Make'].unique():\n",
    "    for model in df.loc[df['Make']==brand, 'Model'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Model']==model) & (df['Engine'].isnull()), 'Engine'] = df.loc[(df['Make']==brand) & (df['Model']==model), 'Engine'].value_counts()[0:1].index.tolist()\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "for brand in df['Make'].unique():\n",
    "    for body in df.loc[df['Make']==brand, 'Body Type'].unique():\n",
    "        try:\n",
    "            df.loc[(df['Make']==brand) & (df['Body Type']==body) & (df['Engine'].isnull()), 'Engine'] = round(df.loc[(df['Make']==brand) & (df['Body Type']==body), 'Engine'].mean(),1)\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "df.loc[df['Engine'].isnull(), 'Engine'] = round(df['Engine'].mean(),1)\n",
    "\n",
    "df['Engine'].value_counts(dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.286824Z",
     "start_time": "2021-05-07T16:04:57.271604Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(46157, 25)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df = df.dropna()\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.316781Z",
     "start_time": "2021-05-07T16:04:57.288748Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Body Type', 'Condition', 'Cylinders', 'Engine',\n",
       "       'Exterior Color', 'For Sale By', 'Interior Color', 'Make', 'Mileage',\n",
       "       'Model', 'Price', 'Transmission', 'Vehicle Title', 'Warranty', 'Year',\n",
       "       'Number of Cylinders', 'Drive Type', 'Fuel Type', 'Drivetrain', 'Fuel',\n",
       "       'Engine Description', 'Turbo', 'USD', 'CAD'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.347834Z",
     "start_time": "2021-05-07T16:04:57.318750Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Body Type', 'Condition', 'Cylinders', 'Engine', 'Exterior Color',\n",
       "       'For Sale By', 'Interior Color', 'Make', 'Mileage', 'Model', 'Price',\n",
       "       'Transmission', 'Vehicle Title', 'Warranty', 'Year', 'Drive Type',\n",
       "       'Fuel Type', 'Turbo'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['Unnamed: 0', 'Number of Cylinders', 'Drivetrain', 'Fuel', 'Engine Description', 'USD', 'CAD'], axis=1)\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.381231Z",
     "start_time": "2021-05-07T16:04:57.349605Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Body Type</th>\n",
       "      <th>Condition</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Exterior Color</th>\n",
       "      <th>For Sale By</th>\n",
       "      <th>Interior Color</th>\n",
       "      <th>Make</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Model</th>\n",
       "      <th>Price</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Vehicle Title</th>\n",
       "      <th>Warranty</th>\n",
       "      <th>Year</th>\n",
       "      <th>Drive Type</th>\n",
       "      <th>Fuel Type</th>\n",
       "      <th>Turbo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Other</td>\n",
       "      <td>Used</td>\n",
       "      <td>8</td>\n",
       "      <td>4.1</td>\n",
       "      <td>Other</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Tan</td>\n",
       "      <td>AMC</td>\n",
       "      <td>76882</td>\n",
       "      <td>Rebel</td>\n",
       "      <td>19350</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Clean</td>\n",
       "      <td>No</td>\n",
       "      <td>1970</td>\n",
       "      <td>2WD</td>\n",
       "      <td>Other</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Convertible</td>\n",
       "      <td>Used</td>\n",
       "      <td>8</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Other</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Black</td>\n",
       "      <td>AMC</td>\n",
       "      <td>118902</td>\n",
       "      <td>Other</td>\n",
       "      <td>10050</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Clean</td>\n",
       "      <td>No</td>\n",
       "      <td>1967</td>\n",
       "      <td>2WD</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Coupe</td>\n",
       "      <td>Used</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>Gray</td>\n",
       "      <td>Private Owner</td>\n",
       "      <td>Other</td>\n",
       "      <td>AMC</td>\n",
       "      <td>53711</td>\n",
       "      <td>Javelin AMX 5.9</td>\n",
       "      <td>7500</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Clean</td>\n",
       "      <td>No</td>\n",
       "      <td>1974</td>\n",
       "      <td>2WD</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Other</td>\n",
       "      <td>Used</td>\n",
       "      <td>8</td>\n",
       "      <td>2.7</td>\n",
       "      <td>Other</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Other</td>\n",
       "      <td>AMC</td>\n",
       "      <td>100</td>\n",
       "      <td>Javelin</td>\n",
       "      <td>45000</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Other</td>\n",
       "      <td>No</td>\n",
       "      <td>1970</td>\n",
       "      <td>2WD</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Coupe</td>\n",
       "      <td>Used</td>\n",
       "      <td>6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>Other</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Other</td>\n",
       "      <td>AMC</td>\n",
       "      <td>87000</td>\n",
       "      <td>Other</td>\n",
       "      <td>9800</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Clean</td>\n",
       "      <td>No</td>\n",
       "      <td>1965</td>\n",
       "      <td>2WD</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Body Type Condition Cylinders Engine Exterior Color    For Sale By  \\\n",
       "0         Other      Used         8    4.1          Other         Dealer   \n",
       "1  Convertible       Used         8    2.9          Other         Dealer   \n",
       "2         Coupe      Used         8      3           Gray  Private Owner   \n",
       "3         Other      Used         8    2.7          Other         Dealer   \n",
       "4         Coupe      Used         6    2.9          Other         Dealer   \n",
       "\n",
       "  Interior Color Make Mileage            Model  Price Transmission  \\\n",
       "0            Tan  AMC   76882            Rebel  19350    Automatic   \n",
       "1          Black  AMC  118902            Other  10050    Automatic   \n",
       "2          Other  AMC   53711  Javelin AMX 5.9   7500    Automatic   \n",
       "3          Other  AMC     100          Javelin  45000    Automatic   \n",
       "4          Other  AMC   87000            Other   9800    Automatic   \n",
       "\n",
       "  Vehicle Title Warranty  Year Drive Type Fuel Type Turbo  \n",
       "0         Clean       No  1970        2WD     Other    No  \n",
       "1         Clean       No  1967        2WD  Gasoline    No  \n",
       "2         Clean       No  1974        2WD  Gasoline    No  \n",
       "3         Other       No  1970        2WD  Gasoline    No  \n",
       "4         Clean       No  1965        2WD  Gasoline    No  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-07T16:04:57.581803Z",
     "start_time": "2021-05-07T16:04:57.384184Z"
    }
   },
   "outputs": [],
   "source": [
    "df.to_csv('cars.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
